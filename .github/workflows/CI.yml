name: Cross Platform Build

on:
  push:
    tags: ['v*']
  workflow_dispatch:

env:
  BUILD_DIR: ${{ github.workspace }}/build
  ARTIFACT_DIR: ${{ github.workspace }}/artifacts
  NATIVE_PROJECT_DIR: ${{ github.workspace }}/SimpleAudioPlayer.Native
  RUNTIME_DIR: ${{ github.workspace }}/SimpleAudioPlayer.Native/runtimes

jobs:
  windows:
    name: Windows
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ x86, x86_64 ]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MinGW
      run: |
        sudo apt-get update
        # 安装 MinGW-w64 工具链（包含 posix 线程和异常处理）
        sudo apt-get install -y \
          mingw-w64 \
          wine64

    - name: Configure
      run: |
        cmake -B $BUILD_DIR/windows-${{ matrix.arch }} -S ./Native \
          -DCMAKE_TOOLCHAIN_FILE=windows.toolchain.cmake \
          -DCROSS_ARCH=${{ matrix.arch }}

    - name: Build
      run: cmake --build $BUILD_DIR/windows-${{ matrix.arch }} --config Release -- -j$(nproc)

    - name: Package
      run: |
        mkdir -p $ARTIFACT_DIR/windows-${{ matrix.arch }}
        cp $BUILD_DIR/windows-${{ matrix.arch }}/bin/*.dll $ARTIFACT_DIR/windows-${{ matrix.arch }}/

    - uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.arch }}
        path: ${{env.ARTIFACT_DIR}}/windows-${{ matrix.arch }}/libaudio_player.dll

  linux:
    name: Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm, aarch64, x86_64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Cross Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        sudo apt-get install -y clang lld llvm

    - name: Configure
      run: |
        cmake -B $BUILD_DIR/linux-${{ matrix.arch }} -S ./Native \
          -DCMAKE_TOOLCHAIN_FILE=linux.toolchain.cmake \
          -DCROSS_ARCH=${{ matrix.arch }}

    - name: Build
      run: cmake --build $BUILD_DIR/linux-${{ matrix.arch }} -- -j$(nproc)

    - name: Package
      run: |
        mkdir -p $ARTIFACT_DIR/linux-${{ matrix.arch }}
        cp $BUILD_DIR/linux-${{ matrix.arch }}/lib/*.so $ARTIFACT_DIR/linux-${{ matrix.arch }}/
        ls $ARTIFACT_DIR/linux-${{ matrix.arch }}

    - uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}
        path: ${{env.ARTIFACT_DIR}}/linux-${{ matrix.arch }}/libaudio_player.so

  macos:
    name: macOS
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [ arm64, x86_64 ]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_15.4.app
        sudo xcodebuild -license accept
        xcrun --show-sdk-path  # 验证 SDK 路径

    - name: Configure
      run: |
        cmake -B $BUILD_DIR/macos-${{ matrix.arch }} -S ./Native \
          -DCMAKE_TOOLCHAIN_FILE=apple.toolchain.cmake \
          -DAPPLE_PLATFORM=MACOS \
          -DAPPLE_ARCH=${{ matrix.arch }}

    - name: Build
      run: |
        # 使用tee命令捕获完整构建日志
        cmake --build $BUILD_DIR/macos-${{ matrix.arch }} --config Release --
        
    - name: Create macos
      run: |
        mkdir -p $ARTIFACT_DIR/macos-${{ matrix.arch }}
        lipo -create -output $ARTIFACT_DIR/macos-${{ matrix.arch }}/libaudio_player.dylib \
          $BUILD_DIR/macos-${{ matrix.arch }}/lib/*.dylib

    - uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.arch }}
        path: ${{env.ARTIFACT_DIR}}/macos-${{ matrix.arch }}/libaudio_player.dylib

  ios:
    name: ios
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode_15.4.app
          sudo xcodebuild -license accept
          xcrun --show-sdk-path  # 验证 SDK 路径

      - name: Configure
        run: |
          cmake -B $BUILD_DIR/ios -S ./Native \
            -DCMAKE_TOOLCHAIN_FILE=apple.toolchain.cmake \
            -DAPPLE_PLATFORM=IOS \
            -DAPPLE_ARCH=arm64

      - name: Build
        run: |
          # 使用tee命令捕获完整构建日志
          cmake --build $BUILD_DIR/ios --config Release -- 

      - name: Create ios
        run: |
          mkdir -p $ARTIFACT_DIR/ios 
          lipo -create -output $ARTIFACT_DIR/ios/libaudio_player.dylib \
            $BUILD_DIR/ios/lib/*.dylib

      - uses: actions/upload-artifact@v4
        with:
          name: ios
          path: ${{env.ARTIFACT_DIR}}/ios/libaudio_player.dylib

  android:
    name: Android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: [armeabi-v7a, arm64-v8a, x86_64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Cross Tools
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build

    - name: Setup NDK
      uses: android-actions/setup-android@v2

    - name: Configure
      run: |
        cmake -B $BUILD_DIR/android-${{ matrix.abi }} -S ./Native \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DCROSS_TARGET=Android \
          -DCROSS_ARCH=${{ matrix.abi }} \
          -DANDROID_ABI=${{ matrix.abi }} \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DANDROID_NATIVE_API_LEVEL=21

    - name: Build
      run: cmake --build $BUILD_DIR/android-${{ matrix.abi }}  -- -j$(nproc)

    - name: Package
      run: |
        mkdir -p $ARTIFACT_DIR/android-${{ matrix.abi }}
        cp $BUILD_DIR/android-${{ matrix.abi }}/lib/*.so $ARTIFACT_DIR/android-${{ matrix.abi }}/

    - uses: actions/upload-artifact@v4
      with:
        name: android-${{ matrix.abi }}
        path: ${{env.ARTIFACT_DIR}}/android-${{ matrix.abi }}/libaudio_player.so

  package_nuget:
    name: Package NuGet
    needs: [windows, linux, macos, ios, android]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
         path: ${{env.ARTIFACT_DIR}}
    - name: Create Runtime
      run: |
        # 创建标准runtime目录结构
        mkdir -p ${{env.RUNTIME_DIR}}/win-x64/native
        mkdir -p ${{env.RUNTIME_DIR}}/win-x86/native
        mkdir -p ${{env.RUNTIME_DIR}}/linux-x64/native
        mkdir -p ${{env.RUNTIME_DIR}}/linux-arm/native
        mkdir -p ${{env.RUNTIME_DIR}}/linux-arm64/native
        mkdir -p ${{env.RUNTIME_DIR}}/osx-x64/native
        mkdir -p ${{env.RUNTIME_DIR}}/osx-arm64/native
        mkdir -p ${{env.RUNTIME_DIR}}/iOS-arm64/native
        mkdir -p ${{env.RUNTIME_DIR}}/android-arm/native
        mkdir -p ${{env.RUNTIME_DIR}}/android-x64/native
        mkdir -p ${{env.RUNTIME_DIR}}/android-arm64/native
        
        # Windows
        cp ${{env.ARTIFACT_DIR}}/windows-x86_64/libaudio_player.dll ${{env.RUNTIME_DIR}}/win-x64/native/
        cp ${{env.ARTIFACT_DIR}}/windows-x86/libaudio_player.dll ${{env.RUNTIME_DIR}}/win-x86/native/

        # Linux
        cp ${{env.ARTIFACT_DIR}}/linux-x86_64/libaudio_player.so ${{env.RUNTIME_DIR}}/linux-x64/native/
        cp ${{env.ARTIFACT_DIR}}/linux-arm/libaudio_player.so ${{env.RUNTIME_DIR}}/linux-arm/native/
        cp ${{env.ARTIFACT_DIR}}/linux-aarch64/libaudio_player.so ${{env.RUNTIME_DIR}}/linux-arm64/native/

        # macOS
        cp ${{env.ARTIFACT_DIR}}/macos-x86_64/libaudio_player.dylib ${{env.RUNTIME_DIR}}/osx-x64/native/
        cp ${{env.ARTIFACT_DIR}}/macos-arm64/libaudio_player.dylib ${{env.RUNTIME_DIR}}/osx-arm64/native/

        # iOS
        cp ${{env.ARTIFACT_DIR}}/ios/libaudio_player.dylib ${{env.RUNTIME_DIR}}/iOS-arm64/native/

        # Android
        cp ${{env.ARTIFACT_DIR}}/android-arm64-v8a/libaudio_player.so ${{env.RUNTIME_DIR}}/android-arm64/native/
        cp ${{env.ARTIFACT_DIR}}/android-armeabi-v7a/libaudio_player.so ${{env.RUNTIME_DIR}}/android-arm/native/
        cp ${{env.ARTIFACT_DIR}}/android-x86_64/libaudio_player.so ${{env.RUNTIME_DIR}}/android-x64/native/
         
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Publish NuGet Packages
      id: publish_nuget
      uses: tedd/publish-nuget-neo@v1.0.2
      with:
        NUGET_KEY: ${{secrets.NUGET_API_KEY}}
        PACKAGE_NAME: Jx.SimpleAudioPlayer.Natvie
        PROJECT_FILE_PATH: ${{ env.NATIVE_PROJECT_DIR }}/SimpleAudioPlayer.Native.csproj
    